# This Python file uses the following encoding: utf-8
import sys
from pathlib import Path
from PySide6.QtGui import QGuiApplication
from PySide6.QtQml import QQmlApplicationEngine
from PySide6.QtCore import QObject, Signal, Slot

# 导入登录控制器
from Controller.LoginController import LoginController


# 页面管理器 - 处理页面切换逻辑
class PageManager(QObject):
    # 信号定义
    pageChanged = Signal(str)

    def __init__(self, engine):
        super().__init__()
        self.engine = engine
        self.current_page = "login"

    @Slot(str)
    def changePage(self, page_name):
        """切换页面"""
        self.current_page = page_name
        self.pageChanged.emit(page_name)

        # 清空当前窗口
        for obj in self.engine.rootObjects():
            obj.close()

        # 加载新页面
        if page_name == "main":
            qml_file = Path(__file__).resolve().parent / "QT_Oil_NewContent/MainWindow.qml"
        else:
            qml_file = Path(__file__).resolve().parent / "QT_Oil_NewContent/StartWindow.qml"

        self.engine.load(qml_file)




# 主应用类 - 管理应用程序生命周期
class Application(QObject):
    def __init__(self):
        super().__init__()
        self.app = QGuiApplication(sys.argv)
        self.engine = QQmlApplicationEngine()

        # 设置应用程序信息
        self.app.setOrganizationName("OilTech")
        self.app.setOrganizationDomain("oiltech.com")
        self.app.setApplicationName("渤海装备推荐系统V1.0")

        # 初始化页面管理器
        self.page_manager = PageManager(self.engine)

        # 初始化控制器
        self.login_controller = LoginController()

        # 存储用户信息
        self.current_user = ""
        self.current_project = ""

        # 连接登录成功信号到处理函数
        self.login_controller.loginSuccess.connect(self.on_login_success)
        self.login_controller.loginFailed.connect(self.on_login_failed)

        # 将控制器注册到QML引擎
        self.engine.rootContext().setContextProperty("loginController", self.login_controller)
        self.engine.rootContext().setContextProperty("pageManager", self.page_manager)


        # 加载登录QML文件
        qml_file = Path(__file__).resolve().parent / "QT_Oil_NewContent\StartWindow.qml"
        self.engine.load(qml_file)

        if not self.engine.rootObjects():
            sys.exit(-1)

    def run(self):
        """运行应用程序主循环"""
        return self.app.exec()

    @Slot(str, str)
    def on_login_success(self, project_name, user_name):
        """登录成功处理函数"""
        print(f"登录成功! 项目: {project_name}, 用户: {user_name}")
        # 保存用户信息
                self.current_user = user_name
                self.current_project = project_name

                # 切换到主窗口
                self.open_main_window(project_name, user_name)

    @Slot(str)
    def on_login_failed(self, error_message):
        """登录失败处理函数"""
        print(f"登录失败: {error_message}")
        # 可以在这里添加错误处理代码

if __name__ == "__main__":
    app = Application()
    sys.exit(app.run())
